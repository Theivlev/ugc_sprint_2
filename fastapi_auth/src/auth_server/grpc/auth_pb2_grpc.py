# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import src.auth_server.grpc.auth_pb2 as auth__pb2


class AuthServiceStub(object):
    """Authorization service that verifies a token"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckToken = channel.unary_unary(
            "/auth.AuthService/CheckToken",
            request_serializer=auth__pb2.CheckTokenRequest.SerializeToString,
            response_deserializer=auth__pb2.CheckTokenResponse.FromString,
        )


class AuthServiceServicer(object):
    """Authorization service that verifies a token"""

    def CheckToken(self, request, context):
        """Accepts a token and returns the verification result"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CheckToken": grpc.unary_unary_rpc_method_handler(
            servicer.CheckToken,
            request_deserializer=auth__pb2.CheckTokenRequest.FromString,
            response_serializer=auth__pb2.CheckTokenResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("auth.AuthService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Authorization service that verifies a token"""

    @staticmethod
    def CheckToken(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/CheckToken",
            auth__pb2.CheckTokenRequest.SerializeToString,
            auth__pb2.CheckTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
